
Te quiero sarita.txt

#!/usr/bin/python

'''
A simple implementation of the traceroute utility using Python.
poor-mans-traceroute.py is a very basic one-function implementation.
traceroute.py is a slightly more complete implementation accepting
command-line arguments, etc.
taken from: https://github.com/leonidg/Poor-Man-s-traceroute
copyright: Leonid Grinberg
edited and modified by: Daniel Riofrio.
'''

import optparse
import socket
import sys
import timeit
import time
import datetime
import subprocess
import re
from typing import List, Any

icmp = socket.getprotobyname('icmp')
udp = socket.getprotobyname('udp')


def create_sockets(ttl):
    """
    Sets up sockets necessary for the traceroute.  We need a receiving
    socket and a sending socket.
    """
    recv_socket = socket.socket(socket.AF_INET, socket.SOCK_RAW, icmp)
    send_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, udp)
    send_socket.setsockopt(socket.SOL_IP, socket.IP_TTL, ttl)
    return recv_socket, send_socket


def traceroute(file_name, dest_name, port, max_hops):
    dest_addr = socket.gethostbyname(dest_name)

    timeStamp = time.time()

    strTimeStamp = datetime.datetime.fromtimestamp(timeStamp).strftime('%Y.%m.%d.%H.%M.%S')

    print (file_name + ' : ' + 'Trying to reach - ' + dest_name + ' at: '+ dest_addr + ' - ' + strTimeStamp)


    fd = open(file_name+'.'+strTimeStamp+'.txt', 'w')

    fd.write(dest_addr+'\n')

    ttl = 1
    ttl2 = 1
    while True:
        recv_socket, send_socket = create_sockets(ttl)
        recv_socket.bind(("", port))
        send_socket.sendto(b"", (dest_name, port))
        curr_addr = None
        curr_name = None
        curr_txt = ''

        try:
            # socket.recvfrom() gives back (data, address), but we
            # only care about the latter.
            recv_socket.settimeout(1.0)
            _, curr_addr = recv_socket.recvfrom(512)
            curr_addr = curr_addr[0]  # address is given as tuple
            try:
                curr_name = socket.gethostbyaddr(curr_addr)[0]
            except socket.error:
                curr_name = curr_addr
        except socket.error:
            pass
        finally:
            send_socket.close()
            recv_socket.close()

        if curr_addr is not None:
            if curr_addr == '127.0.0.1':
                curr_addr = '*'
                curr_host = '*'
            else:
                curr_host = "%s (%s)" % (curr_name, curr_addr)
        else:
            curr_addr = '*'
            curr_host = "*"

        if curr_addr != '*':
            print ("%d\t%s" % (ttl2, curr_host))
            fd.write(str(ttl2)+'\t'+curr_addr+'\n')
            ttl2+=1

        ttl += 1

        if curr_addr == dest_addr or ttl > max_hops:
            break

